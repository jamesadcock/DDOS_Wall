import re
import time
import datetime
from datetime import timedelta

client_data = list()


class Timezone(datetime.tzinfo):

    def __init__(self, name="+0000"):
        self.name = name
        seconds = int(name[:-2])*3600+int(name[-2:])*60
        self.offset = datetime.timedelta(seconds=seconds)

    def utcoffset(self, dt):
        return self.offset

    def dst(self, dt):
        return timedelta(0)

    def tzname(self, dt):
        return self.name


def parse_access_logs(location='/var/log/apache2/access.log'):
    f = open(location, 'r')
    access_log = f.readlines()
    elements = [
        r'(?P<host>\S+)',                   # host
        r'\S+',                             # unused
        r'(?P<user>\S+)',                   # user
        r'\[(?P<time>.+)\]',                # time
        r'"(?P<request>.+)"',               # request
        r'(?P<status>[0-9]+)',              # status
        r'(?P<size>\S+)',                   # size %b
        r'"(?P<referer>.*)"',               # referer
        r'"(?P<agent>.*)"',                 # user agent
    ]
    pattern = re.compile(r'\s+'.join(elements)+r'\s*\Z')
    logs = list()

    for line in access_log:
        m = pattern.match(line)
        try:
            log_data = m.groupdict()
            if log_data["user"] == "-":
                log_data["user"] = None
                log_data["status"] = int(log_data["status"])
            if log_data["size"] == "-":
                log_data["size"] = 0
            else:
                log_data["size"] = int(log_data["size"])
            if log_data["referer"] == "-":
                log_data["referer"] = None

            t = time.strptime(log_data["time"][:-6], "%d/%b/%Y:%H:%M:%S")
            t = list(t[:6]) + [0, Timezone(log_data["time"][-5:])]
            log_data["time"] = datetime.datetime(*t)
            logs.append(log_data)
        except AttributeError:
            pass
    return logs


def add_client_data(ip_address):
        client_data.append({'ip_address': ip_address,
                            'download_data': [],
                            })


def get_current_client_data(ip_address):
    """
    This Method gets the data pertaining to the supplied ip address.  If the connection does not already have an
    entry it returns None
    :param ip_address: string, ip address
    :return: dict for client
    """
    global client_data
    try:  # Try to find the client data
        client = (item for item in client_data if item['ip_address'] == ip_address).next()
        return client
    except StopIteration:
        return None


def update_client_data():
    """
    This method updates the client_data with the time and size of the response
    :return: None
    """
    logs = parse_access_logs()
    for log in logs:
        current_client = get_current_client_data(log['host'])
        if current_client is None:
            add_client_data(log['host'])
            current_client = get_current_client_data(log['host'])
        current_client['download_data'].append({'size': log['size'], 'time': int(log['time'].strftime("%s"))})


def get_maximum_download():
    update_client_data()
    try:
        start_time = int(client_data[0]['download_data'][0]['time'])
    except IndexError:
        print 'No log data'
        exit()
    end_time = start_time + 60
    maximum = 0
    for connection in client_data:
        download_data_length = len(connection['download_data'])
        i = 0
        while i <= download_data_length:
            total = 0
            for response in connection['download_data']:
                if response['time'] >= start_time + i and response['time'] <= end_time + i:
                    total += float(response['size'])
                avg = total / 60.0
                if avg > maximum:
                    maximum = avg
            i += 1
    return maximum

if __name__ == '__main__':
    get_maximum_download()